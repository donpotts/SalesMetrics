@page "/crmdashboard"
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject AppService AppService
@using DP.BlazorDashboard.Models


<PageTitle>Sales Metrics Dashboard</PageTitle>

<MudText Typo="Typo.h3">Welcome to the Sales Metrics Dashboard</MudText>

<Dashboard @key="dashboardKey"
           StorageKey="blazor-dashboard-final"
           InitialLayoutFactory="GetInitialLayout"
           CardRenderer="RenderCardContent"
           OnLayoutChanged="HandleChartsRerender" />

@code {
    private IJSObjectReference? _chartModule;
    private decimal totalSalesThisMonth;
    private int totalOrdersThisMonth;
    private int newCustomersThisMonth;
    private decimal avgOrderValueThisMonth;
    private string topSellingProductThisMonth = string.Empty;
    private int dashboardKey = 0;

    // Chart configs for real data
    private ChartConfig? salesChartConfig;
    private ChartConfig? sales30DaysChartConfig;
    private ChartConfig? ordersByStatusChartConfig;
    private ChartConfig? revenueByCategoryChartConfig;
    private ChartConfig? customerGrowthChartConfig;

    // Recent orders
    private List<Order> recentOrders = new();

    protected override async Task OnInitializedAsync()
    {
        var now = DateTime.UtcNow;
        var firstDay = new DateTime(now.Year, now.Month, 1, 0, 0, 0, DateTimeKind.Utc);
        var nextMonth = firstDay.AddMonths(1);
        string orderFilter = $"OrderDate ge {firstDay:yyyy-MM-ddTHH:mm:ssZ} and OrderDate lt {nextMonth:yyyy-MM-ddTHH:mm:ssZ}";
        var odataOrders = await AppService.ListOrderODataAsync(filter: orderFilter, expand: "Customer,OrderItem");
        var orders = odataOrders?.Value?.Where(o => o.OrderDate.HasValue && o.TotalAmount.HasValue).ToList() ?? new List<Order>();
        totalSalesThisMonth = orders.Sum(o => o.TotalAmount!.Value);
        totalOrdersThisMonth = orders.Count;
        avgOrderValueThisMonth = totalOrdersThisMonth > 0 ? totalSalesThisMonth / totalOrdersThisMonth : 0;

        // New customers this month (date-only filter for compatibility)
        string customerFilter = $"CreatedDate ge {firstDay:yyyy-MM-dd} and CreatedDate lt {nextMonth:yyyy-MM-dd}";
        var odataCustomers = await AppService.ListCustomerODataAsync(filter: customerFilter);
        newCustomersThisMonth = odataCustomers?.Value?.Count() ?? 0;

        // Fetch all orders, products, categories, customers for charts
        var allOrders = (await AppService.ListOrderAsync())?.Where(o => o.OrderDate.HasValue && o.TotalAmount.HasValue).ToList() ?? new List<Order>();
        var allOrderItems = (await AppService.ListOrderItemAsync())?.ToList() ?? new List<OrderItem>();
        var allProducts = (await AppService.ListProductAsync())?.ToList() ?? new List<Product>();
        var allCategories = (await AppService.ListCategoryAsync())?.ToList() ?? new List<Category>();
        var allCustomers = (await AppService.ListCustomerAsync())?.ToList() ?? new List<Customer>();

        // Top-selling product this month
        var productSales = new Dictionary<long, long>();
        foreach (var order in orders)
        {
            if (order.OrderItem != null)
            {
                foreach (var item in order.OrderItem)
                {
                    var productId = item.ProductId ?? 0;
                    var quantity = item.Quantity ?? 0;
                    if (productSales.ContainsKey(productId))
                        productSales[productId] += quantity;
                    else
                        productSales[productId] = quantity;
                }
            }
        }
        if (productSales.Count > 0)
        {
            var top = productSales.OrderByDescending(x => x.Value).First();
            // Fetch product name by id
            var product = allProducts.FirstOrDefault(p => p.Id == top.Key);
            topSellingProductThisMonth = product != null ? $"{product.Name} (Units Sold: {top.Value})" : $"ProductId {top.Key} (Units Sold: {top.Value})";
        }
        else
        {
            topSellingProductThisMonth = "N/A";
        }

        // Sales Over Time (monthly, last 8 months)
        var salesByMonth = allOrders
            .GroupBy(o => o.OrderDate!.Value.ToString("MMM yyyy"))
            .OrderBy(g => DateTime.ParseExact(g.Key, "MMM yyyy", null))
            .TakeLast(8)
            .ToList();
        salesChartConfig = new ChartConfig
        {
            Type = "line",
            Labels = salesByMonth.Select(g => g.Key).ToList(),
            Datasets = new List<ChartDataset>
            {
                new ChartDataset
                {
                    Label = "Sales ($k)",
                    Data = salesByMonth.Select(g => (double)g.Sum(o => o.TotalAmount!.Value)).ToList(),
                    BorderColor = "#007bff",
                    BackgroundColor = "rgba(0, 123, 255, 0.1)",
                    Tension = 0.3,
                    Fill = true
                }
            }
        };

        // Sales Over Time (last 30 days)
        var last30Days = Enumerable.Range(0, 30)
            .Select(i => now.Date.AddDays(-29 + i))
            .ToList();
        sales30DaysChartConfig = new ChartConfig
        {
            Type = "line",
            Labels = last30Days.Select(d => d.ToString("MM-dd")).ToList(),
            Datasets = new List<ChartDataset>
            {
                new ChartDataset
                {
                    Label = "Sales ($)",
                    Data = last30Days.Select(d => (double)allOrders.Where(o => o.OrderDate!.Value.Date == d).Sum(o => o.TotalAmount!.Value)).ToList(),
                    BorderColor = "#007bff",
                    BackgroundColor = "rgba(0, 123, 255, 0.1)",
                    Tension = 0.3,
                    Fill = true
                }
            }
        };

        // Orders by Status
        var statusGroups = allOrders.GroupBy(o => o.Status ?? "Unknown").ToList();
        var statusColors = new[] { "#ffc107", "#17a2b8", "#007bff", "#28a745", "#dc3545", "#6c757d" };
        ordersByStatusChartConfig = new ChartConfig
        {
            Type = "doughnut",
            Labels = statusGroups.Select(g => g.Key).ToList(),
            Datasets = new List<ChartDataset>
            {
                new ChartDataset
                {
                    Label = "Orders",
                    Data = statusGroups.Select(g => (double)g.Count()).ToList(),
                    BackgroundColors = statusColors.Take(statusGroups.Count).ToList()
                }
            }
        };

        // Revenue by Product Category (fix: use Product.Category, which is a collection)
        var revenueByCategory = allOrderItems
            .Where(oi => oi.ProductId.HasValue && oi.Quantity.HasValue)
            .Join(allProducts, oi => oi.ProductId, p => p.Id, (oi, p) => new { oi, p })
            .SelectMany(op => (op.p.Category ?? new List<Category>()).Select(c => new { op.oi, Category = c }))
            .GroupBy(x => x.Category.Name)
            .Select(g => new
            {
                Category = g.Key,
                Revenue = g.Sum(x => (x.oi.UnitPrice ?? 0) * (x.oi.Quantity ?? 0))
            })
            .ToList();
        var categoryColors = new[] { "#007bff", "#28a745", "#ffc107", "#17a2b8", "#6f42c1", "#dc3545" };
        revenueByCategoryChartConfig = new ChartConfig
        {
            Type = "bar",
            Labels = revenueByCategory.Select(x => x.Category).ToList(),
            Datasets = new List<ChartDataset>
            {
                new ChartDataset
                {
                    Label = "Revenue ($)",
                    Data = revenueByCategory.Select(x => (double)x.Revenue).ToList(),
                    BackgroundColors = categoryColors.Take(revenueByCategory.Count).ToList()
                }
            }
        };

        // Customer Growth Over Time (last 12 months)
        var customerGrowthMonths = Enumerable.Range(0, 12)
            .Select(i => now.Date.AddMonths(-11 + i))
            .ToList();
        customerGrowthChartConfig = new ChartConfig
        {
            Type = "line",
            Labels = customerGrowthMonths.Select(d => d.ToString("MMM yy")).ToList(),
            Datasets = new List<ChartDataset>
            {
                new ChartDataset
                {
                    Label = "Customers",
                    Data = customerGrowthMonths.Select(d => (double)allCustomers.Count(c => c.CreatedDate.HasValue && c.CreatedDate.Value <= d.AddMonths(1).AddDays(-1))).ToList(),
                    BorderColor = "#17a2b8",
                    BackgroundColor = "rgba(23, 162, 184, 0.1)",
                    Tension = 0.3,
                    Fill = true
                }
            }
        };

        // Recent Orders (top 10 by OrderDate desc)
        recentOrders = allOrders
            .OrderByDescending(o => o.OrderDate)
            .Take(10)
            .ToList();

        dashboardKey++; // Force Dashboard re-render
        StateHasChanged();
    }

    private List<DashboardCard> GetInitialLayout() => new()
    {
        // First row: 4 KPI cards (W=3 each)
        new DashboardCard
        {
            Id = "kpi-total-sales-month",
            CardType = "total-sales-month",
            Title = "Total Sales (This Month)",
            X = 0, Y = 0, W = 3, H = 4
        },
        new DashboardCard
        {
            Id = "kpi-total-orders-month",
            CardType = "total-orders-month",
            Title = "Total Orders (This Month)",
            X = 3, Y = 0, W = 3, H = 4
        },
        new DashboardCard
        {
            Id = "kpi-new-customers-month",
            CardType = "new-customers-month",
            Title = "New Customers (This Month)",
            X = 6, Y = 0, W = 3, H = 4
        },
        new DashboardCard
        {
            Id = "kpi-avg-order-value-month",
            CardType = "avg-order-value-month",
            Title = "Average Order Value (This Month)",
            X = 9, Y = 0, W = 3, H = 4
        },

        // Second row: 2 KPI cards (W=3 each), 2 KPI cards (W=3 each)
        new DashboardCard
        {
            Id = "kpi-top-selling-product-month",
            CardType = "top-selling-product-month",
            Title = "Top-Selling Product (This Month)",
            X = 0, Y = 4, W = 3, H = 4
        },
        new DashboardCard
        {
            Id = "sales-chart",
            CardType = "sales-chart",
            Title = "Sales Over Time",
            X = 3, Y = 4, W = 9, H = 4,
            ChartConfig = salesChartConfig
        },

        // Third row: Full-width charts/tables (W=12)
        new DashboardCard
        {
            Id = "sales-30days-chart",
            CardType = "sales-30days-chart",
            Title = "Sales Over Time (Last 30 Days)",
            X = 0, Y = 8, W = 12, H = 5,
            ChartConfig = sales30DaysChartConfig
        },
        new DashboardCard
        {
            Id = "orders-by-status-chart",
            CardType = "orders-by-status-chart",
            Title = "Orders by Status",
            X = 0, Y = 13, W = 6, H = 5,
            ChartConfig = ordersByStatusChartConfig
        },
        new DashboardCard
        {
            Id = "revenue-by-category-chart",
            CardType = "revenue-by-category-chart",
            Title = "Revenue by Product Category",
            X = 6, Y = 13, W = 6, H = 5,
            ChartConfig = revenueByCategoryChartConfig
        },
        new DashboardCard
        {
            Id = "customer-growth-chart",
            CardType = "customer-growth-chart",
            Title = "Customer Growth Over Time",
            X = 0, Y = 18, W = 12, H = 5,
            ChartConfig = customerGrowthChartConfig
        },
        new DashboardCard
        {
            Id = "recent-orders",
            CardType = "recent-orders",
            Title = "Recent Orders",
            X = 0, Y = 23, W = 12, H = 6
        },
    };

    private RenderFragment<DashboardCard> RenderCardContent => card => __builder =>
    {
        switch (card.CardType)
        {
            case "sales-chart":
            case "sales-30days-chart":
            case "orders-by-status-chart":
            case "revenue-by-category-chart":
            case "customer-growth-chart":
            case "lead-chart":
            case "revenue-chart":
            case "pipeline-chart":
            case "win-rate-chart":
            case "customer-acquisition-chart":
            case "sales-team-chart":
            case "geographic-chart":
            case "forecast-chart":
            case "customer-lifecycle-chart":
            case "churn-analysis-chart":
                <canvas id="@(card.Id)Canvas" style="pointer-events: none;"></canvas>;
                break;
            case "total-sales-month":
                <div class="kpi-card-body">
                    <div class="kpi-number">@($"{totalSalesThisMonth:C0}")</div>
                    <div class="kpi-label">This Month</div>
                </div>
                break;
            case "total-orders-month":
                <div class="kpi-card-body">
                    <div class="kpi-number">@totalOrdersThisMonth</div>
                    <div class="kpi-label">This Month</div>
                </div>
                break;
            case "new-customers-month":
                <div class="kpi-card-body">
                    <div class="kpi-number">@newCustomersThisMonth</div>
                    <div class="kpi-label">This Month</div>
                </div>
                break;
            case "avg-order-value-month":
                <div class="kpi-card-body">
                    <div class="kpi-number">@($"{avgOrderValueThisMonth:C2}")</div>
                    <div class="kpi-label">This Month</div>
                </div>
                break;
            case "top-selling-product-month":
                <div class="kpi-card-body">
                    <div class="kpi-number">@topSellingProductThisMonth</div>
                    <div class="kpi-label">Top Product</div>
                </div>
                break;
            case "recent-orders":
                <div class="recent-orders-card">
                    <table class="table table-sm table-striped">
                        <thead>
                            <tr>
                                <th style="width: 110px; font-weight: normal; text-align: left;">Order #</th>
                                <th style="width: 120px; font-weight: normal; text-align: left;">Date</th>
                                <th style="width: 200px; font-weight: normal; text-align: left;">Customer</th>
                                <th style="width: 120px; font-weight: normal; text-align: left;">Status</th>
                                <th style="width: 120px; font-weight: normal; text-align: right;">Total</th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach (var order in recentOrders)
                        {
                            <tr>
                                <td style="width: 110px;">@order.Id</td>
                                <td style="width: 120px;">@order.OrderDate?.ToString("yyyy-MM-dd")</td>
                                <td style="width: 200px;">@order.Customer?.Name</td>
                                <td style="width: 120px;"><span class="badge bg-secondary">@order.Status</span></td>
                                <td style="width: 120px; text-align: right;">@order.TotalAmount?.ToString("C2")</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>;
                break;
            case "activity":
                <ul class="activity-feed">
                    <li>
                        <span class="icon">
                            <i class="fas fa-user-plus"></i>
                        </span> New lead 'John Smith' assigned to Sarah.
                    </li>
                    <li>
                        <span class="icon">
                            <i class="fas fa-handshake"></i>
                        </span> Deal 'Enterprise Project' moved to negotiation.
                    </li>
                    <li>
                        <span class="icon">
                            <i class="fas fa-check-circle"></i>
                        </span> Deal 'Website Redesign' closed - $15,000.
                    </li>
                    <li>
                        <span class="icon">
                            <i class="fas fa-envelope"></i>
                        </span> Follow-up email sent to 'Tech Solutions Inc'.
                    </li>
                    <li>
                        <span class="icon">
                            <i class="fas fa-calendar-alt"></i>
                        </span> Meeting scheduled with 'ABC Corp' for tomorrow.
                    </li>
                </ul>;
                break;
            case "opportunities":
                <div class="opportunities-list">
                    <div class="opportunity-item">
                        <div class="opportunity-header">
                            <span class="opportunity-name">Global Tech Solutions</span>
                            <span class="opportunity-value">$85,000</span>
                        </div>
                        <div class="opportunity-details">
                            <span class="opportunity-stage">Negotiation</span>
                            <span class="opportunity-probability">75%</span>
                        </div>
                    </div>
                    <div class="opportunity-item">
                        <div class="opportunity-header">
                            <span class="opportunity-name">Marketing Automation Deal</span>
                            <span class="opportunity-value">$65,000</span>
                        </div>
                        <div class="opportunity-details">
                            <span class="opportunity-stage">Proposal</span>
                            <span class="opportunity-probability">60%</span>
                        </div>
                    </div>
                    <div class="opportunity-item">
                        <div class="opportunity-header">
                            <span class="opportunity-name">Enterprise CRM Upgrade</span>
                            <span class="opportunity-value">$120,000</span>
                        </div>
                        <div class="opportunity-details">
                            <span class="opportunity-stage">Qualification</span>
                            <span class="opportunity-probability">40%</span>
                        </div>
                    </div>
                </div>;
                break;
            case "notes":
                <div class="notes-card">
                    <div class="notes-header">
                        <i class="fas fa-sticky-note"></i>
                        <span>Quick Notes</span>
                    </div>
                    <div class="notes-content">
                        <p>• Follow up with Marketing team about Q1 campaigns</p>
                        <p>• Review customer feedback from last month</p>
                        <p>• Prepare presentation for board meeting</p>
                    </div>
                </div>;
                break;
            case "metrics":
                <div class="metrics-card">
                    <div class="metric-row">
                        <span class="metric-label">Conversion Rate</span>
                        <span class="metric-value">12.5%</span>
                    </div>
                    <div class="metric-row">
                        <span class="metric-label">Customer Satisfaction</span>
                        <span class="metric-value">4.8/5</span>
                    </div>
                    <div class="metric-row">
                        <span class="metric-label">Churn Rate</span>
                        <span class="metric-value">2.3%</span>
                    </div>
                    <div class="metric-row">
                        <span class="metric-label">Lead Response Time</span>
                        <span class="metric-value">2.1 hrs</span>
                    </div>
                </div>;
                break;
            case "tasks":
                <div class="tasks-card">
                    <div class="task-item">
                        <input type="checkbox" checked />
                        <span class="task-completed">Call client about renewal</span>
                    </div>
                    <div class="task-item">
                        <input type="checkbox" />
                        <span>Send proposal to prospect</span>
                    </div>
                    <div class="task-item">
                        <input type="checkbox" />
                        <span>Update CRM records</span>
                    </div>
                    <div class="task-item">
                        <input type="checkbox" />
                        <span>Schedule team meeting</span>
                    </div>
                    <div class="task-item">
                        <input type="checkbox" />
                        <span>Review quarterly goals</span>
                    </div>
                </div>;
                break;
            default:
                <div class="default-card">
                    <div class="default-card-icon">
                        <i class="fas fa-plus-circle"></i>
                    </div>
                    <div class="default-card-content">
                        <h4>New Dashboard Card</h4>
                        <p>This is a customizable dashboard card. You can modify this content to display any information you need.</p>
                        <div class="default-card-stats">
                            <div class="stat-item">
                                <span class="stat-number">42</span>
                                <span class="stat-label">Items</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-number">98%</span>
                                <span class="stat-label">Progress</span>
                            </div>
                        </div>
                    </div>
                </div>;
                break;
        }
    };

    private async Task HandleChartsRerender()
    {
        // Console.WriteLine("CRMDashboard.razor: HandleChartsRerender called");

        // Add a delay to ensure the canvas elements are in the DOM
        await Task.Delay(100);

        if (_chartModule == null)
        {
            _chartModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/DP.BlazorDashboard/js/chart-renderer.js");
        }

        try
        {
            var layout = GetInitialLayout();

            // Render each chart with its configuration
            foreach (var card in layout.Where(c => c.ChartConfig != null))
            {
                var canvasId = $"{card.Id}Canvas";

                // Check if canvas exists before trying to render
                var canvasExists = await JSRuntime.InvokeAsync<bool>("eval", $"document.getElementById('{canvasId}') !== null");

                if (canvasExists)
                {
                    await _chartModule.InvokeVoidAsync("renderChart", canvasId, card.ChartConfig);
                    // Console.WriteLine($"Rendered chart for {card.Id}");
                }
                else
                {
                    // Console.WriteLine($"Canvas {canvasId} not found, will retry...");
                    // Retry after a longer delay
                    await Task.Delay(200);
                    canvasExists = await JSRuntime.InvokeAsync<bool>("eval", $"document.getElementById('{canvasId}') !== null");
                    if (canvasExists)
                    {
                        await _chartModule.InvokeVoidAsync("renderChart", canvasId, card.ChartConfig);
                        // Console.WriteLine($"Rendered chart for {card.Id} on retry");
                    }
                }
            }

            // Console.WriteLine("CRMDashboard.razor: All charts rendered successfully.");
        }
        catch (Exception ex)
        {
            // Console.WriteLine($"Error rendering charts: {ex.Message}");
        }
    }

    // Example method to update chart data dynamically
    private async Task UpdateSalesChart()
    {
        if (_chartModule == null) return;

        var updatedConfig = new ChartConfig
        {
            Type = "line",
            Labels = new List<string> { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" },
            Datasets = new List<ChartDataset>
            {
                new ChartDataset
                {
                    Label = "Updated Sales ($k)",
                    Data = new List<double> { 15, 22, 11, 19, 25, 18, 31, 35, 29 },
                    BorderColor = "#dc3545",
                    BackgroundColor = "rgba(220, 53, 69, 0.1)",
                    Tension = 0.3,
                    Fill = true
                }
            }
        };

        await _chartModule.InvokeVoidAsync("renderChart", "sales-chartCanvas", updatedConfig);
    }
}